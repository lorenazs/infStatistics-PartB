else
{
if (colOutcome == 'pneumonia')
{
colOutcome = 23
}
else
{
if (colOutcome == 'heart failure')
{
colOutcome = 17
}
else
{
stop('invalid outcome')
}
}
}
}
if (colOutcome !=0)
{
#obtener casos completos para el outcome y el estado
datos = subset(datos,datos[,colOutcome] != 'Not Available' && datos[,7]==state)
datos[,colOutcome] = as.numeric(datos[,colOutcome])
# se quiere el mejor valor para el outcome
if (num == 'best')
{
valorOut= min(datos[,colOutcome])
}
else
{
if (num == 'worst')  #se busca el peor valor para el outcome
{
valorOut = max(datos[,colOutcome])
}
else #es cualquier otro valor
{
if is.numeric(valorOut)
{
valorOut = as.numeric(valorOut)
#determinar si es un valor superior a la cantidad de hospitales
if (valorOut > len(datos[,colOutcome]))
{
resultado = c(resultado,'NA')
superaCantidad = TRUE
}
else  #ordenar por valor del outcome y por nombre del hospital
{
datos = datos[order(datos[,colOutcome],datos[,2]),]
#obtener el outcom
valorOut = datos[posRanking,colOutcome]
}
}
}
}
if !(supera)
{
if(!(is.numeric(num)))
{
rango = c(1:length(datos[,colOutcome]))
for(i in rango)
{
if(datos[i,colOutcome]== valorCompara) #encontrar empates
{
#resultado=c(resultado,as.character(datos$Hospital.Name[i]))
resultado=c(resultado,datos$Hospital.Name[i])
}
}
if(length(resultado)>1) #hubo empate
{
resultado=sort(resultado)
}
}
else
{
resultado=c(resultado,datos$Hospital.Name[num])
}
}
resultado[1]
}
}
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet,BodyWeight)
BodyWeight
library(datasets)
data(airquality)
p<-xyplot(Ozone~ Wind | factor(Month),data=airquality)
p
qplot(Wind,Ozone,data=airquality,facets=.~factor(Month))
library(ggplot2)
qplot(Wind,Ozone,data=airquality,facets=.~factor(Month))
qplot(Wind, Ozone,data=airquality, geom="smooth")
qplot(Wind,Ozone,data=airquality)
airquality
airquality=transform(airquality,Month=factor(Month))
qplot(Wind,Ozone,data=airquality,facets=.~ Month)
g<-ggplot(movies,aes(votes,rating))
print(g)
qplot(votes,rating,data=movies)
qplot(votes,rating,data=movies,smooth="loess")
qplot(votes,rating,data=movies)+geom_smooth()
qplot(votes,rating,data=movies)+stats_smooth("loess")
packages.install(knitr)
install.packages(knitr)
install.packages('knitr')
x <- replicate(5,mean(rexp(40)))
View(x)
datos<- replicate(rexp(40))
datos<- replicate(5,rexp(40))
View(datos)
samples <- replicate(times,rexp(n))
times=1000
samples <- replicate(times,rexp(n))
n=40
lambda=0.2
samples <- replicate(times,rexp(n,lambda))
View(samples)
theMeans <- replicate(times,means(samples))
theMeans <- replicate(times,mean(samples))
View(theMeans)
mean(samples[1])
mean(samples[0])
mean(samples[2])
mean(samples[,0])
colMeans(samples)
mean(samples[1,])
mean(samples[,0])
samples[,0]
samples[,1]
View(samples)
mean(samples[,1])
colMeans(samples[,1])
s<-colMeans(samples)
s[1]
z<-sapply(1:5,mean(samples[,i]))
z<-sapply(1:5,mean(samples[,]))
replicate(1,mean(samples))
Exponential distribution Simulation
samples <- replicate(times,rexp(n,lambda))
times=1000
n=40
lambda=0.2
samples <- replicate(times,rexp(n,lambda))
vectMeans<- NULL
vectVar<-NULL
vectStDev<-NULL
for (i in 1:times)
{
vectMeans <- c(vectMeans,mean(samples[,i])
vectVar <- c(vectVar,var(samples[,i]))
vectStDev<-c(vectStDev, sd(samples[,i]))
}
for (i in 1:times)
{
vectMeans <- c(vectMeans,mean(samples[,i]))
vectVar <- c(vectVar,var(samples[,i]))
vectStDev<-c(vectStDev, sd(samples[,i]))
}
hist(expoData)
hist(samples)
plot(samples)
View(samples)
mean(samples)
sd(samples)
apply(*,2,sd)
apply(samples,2,sd)
?appply
?apply
apply(samples,c(1,2),sd)
mean(samples)
variance(samples)
var(samples)
hist(samples[,1])
plot(samples[,1])
mean(samples)
sd(samples)
samples <- replicate(times,rexp(n,lambda))
View(samples)
qqnorm(x)
qqline(x)
hist(x)
qqnorm(x)
qqline(x)
samples <- replicate(times,rexp(n,lambda))
qqnorm(x)
qqline(x)
samples <- replicate(1000,rexp(40,0.2))
qqnorm(x)
qqline(x)
theMean=mean(samples)
theMean
sd(samples)
theMean
theMean - (1.98)/40000
theMean - ((1.98)/40000)
lambda = 0.2
n= 40
times = 1000
vectMeans<- NULL
vectVar<-NULL
vectStDev<-NULL
samples <- replicate(times,rexp(n,lambda))
for (i in 1:times)
{
vectMeans <- c(vectMeans,mean(samples[,i]))
vectVar <- c(vectVar,var(samples[,i]))
vectStDev<-c(vectStDev, sd(samples[,i]))
}
theMean<-mean(vectMeans)
theDensity <- density(vectMeans)
plot(theDensity)
qqnorm(samples)
qqline(samples)
s1 <- samples[,1]
View(s1)
qnorm(.975)
mean(s1) + c(1,-1) * 1.96 * sd(s1)/sqrt(length(s1))
mean(samples) + c(1,-1) * 1.96 * sd(samples)/sqrt(length(samples))
mean(samples) + c(1,-1) * 1.96 * apply(samples,2,sd)/sqrt(length(samples))
plot(mean(samples) + c(1,-1) * 1.96 * sd(samples)/sqrt(length(samples)))
hist(mean(samples) + c(1,-1) * 1.96 * apply(samples,2,sd)/sqrt(length(samples)))
theMean
N=c(10,30,50,70,90,110,130)
CP=array(0,length(N))
for(k in 1:length(N)){
n=N[k]
X= array(rexp(n*1000),c(1000,n))
M=apply(X,1,mean)
MX=apply(X,1,max)
MN=apply(X,1,min)
C = (MX-MN)/(2*sqrt(n))
ci=((M-C<1) &(M+C>1))
CP[k]=mean(ci)}
CP
ci
CP
length(samples)
length(samples[,1])
coverage = array(0,1000)
for (k in 1:1000)
{
Mean= apply(X,2,mean)
Maxi = apply(X,2,max)
Mini = apply(X,2,min)
C = (Maxi-Mini)/(2*sqrt(40))
cinterval = ((Mean-C < 1) & (Mean + C > 1))
coverage[k]=mean(cinterval)
}
View(coverage)
coverage = array(0,1000)
for (k in 1:1000)
{
Mean= apply(samples,2,mean)
Maxi = apply(samples,2,max)
Mini = apply(samples,2,min)
C = (Maxi-Mini)/(2*sqrt(40))
cinterval = ((Mean-C < 1) & (Mean + C > 1))
coverage[k]=mean(cinterval)
}
View(coverage)
Mean= apply(samples,2,mean)
Mean
mean(cinterval)
ci
Maxi
Mini
cinterval
Mean[ci]
ci
cinterval
CP
mean(cinterval)
mean(ci)
ci
mean(ci)
mean[ci]
mean[,ci]
mean(ci)
CP
cinterval
mean(ci)
View(ci)
View(cinterval)
CP
View(cinterval)
coverage = array(0,1000)
for (k in 1:1000)
{
Mean= apply(samples[,k],2,mean)
Maxi = apply(samples[,k],2,max)
Mini = apply(samples[,k],2,min)
C = (Maxi-Mini)/(2*sqrt(40))
cinterval = ((Mean-C < 1) & (Mean + C > 1))
coverage[k]=mean(cinterval)
}
x<-apply(samples,2,mean)
View(x)
coverage = array(0,1000)
for (k in 1:1000)
{
oneSample=samples[,k]
Mean= apply(oneSample,2,mean)
Maxi = apply(oneSample,2,max)
Mini = apply(oneSample,2,min)
C = (Maxi-Mini)/(2*sqrt(40))
cinterval = ((Mean-C < 1) & (Mean + C > 1))
coverage[k]=mean(cinterval)
}
coverage = array(0,1000)
for (k in 1:1000)
{
oneSample=samples[,k]
Mean= mean(oneSample)
Maxi = max(oneSample)
Mini = min(oneSample)
C = (Maxi-Mini)/(2*sqrt(40))
cinterval = ((Mean-C < 1) & (Mean + C > 1))
coverage[k]=mean(cinterval)
}
coverage
cinterval
lambda = 0.2
n= 40
times = 1000
vectMeans<- NULL
vectVar<-NULL
vectStDev<-NULL
samples <- replicate(times,rexp(n,lambda))
for (i in 1:times)
{
vectMeans <- c(vectMeans,mean(samples[,i]))
vectVar <- c(vectVar,var(samples[,i]))
vectStDev<-c(vectStDev, sd(samples[,i]))
}
coverage = array(0,1000)
for (k in 1:1000)
{
oneSample=samples[,k]
Mean= mean(oneSample)
Maxi = max(oneSample)
Mini = min(oneSample)
C = (Maxi-Mini)/(2*sqrt(40))
cinterval = ((Mean-C < 1) & (Mean + C > 1))
coverage[k]=mean(cinterval)
}
coverage
cinterval
Maxi = max(samples)
Mini = min(samples)
C = (Maxi-Mini)/(2*sqrt(1000))
cinterval = ((Mean-C <1) & (Mean + C > 1))
coverage[k]=mean(cinterval)
coverage
Maxi = max(samples)
Maxi
Mini = min(samples)
Mini
C = (Maxi-Mini)/(2*sqrt(1000))
C
cinterval = ((Mean-C <1) & (Mean + C > 1))
cinterval
coverage=mean(cinterval)
coverage
View(samples)
View(samples[,1])
coverage = array(0,1000)
mean(samples[,1])
max(samples[,1])
min(samples[,1])
max(samples[,1]) - min(samples[,1])
2*sqrt(40)
12.96945/12.64911
MeanSample-1.025325
mean(samples[,1])
MeanSample= mean(samples[,1])
MaxiSample = max(samples[,1])
MiniSample = min(samples[,1])
C = (MaxiSample-MiniSample)/(2*sqrt(n))
C
cinterval = ((MeanSample-C < 1) & (MeanSample + C > 1))
cinterval
MeanSample-C
mean(cinterval)
for (k in 1:1000)
{
oneSample=samples[,k]
MeanSample= mean(oneSample)
MaxiSample = max(oneSample)
MiniSample = min(oneSample)
C = (MaxiSample-MiniSample)/(2*sqrt(n))
cinterval = ((MeanSample-C < 1) & (MeanSample + C > 1))
if cinterval
{
cont++
}
}
cont
cont=0
for (k in 1:1000)
{
oneSample=samples[,k]
MeanSample= mean(oneSample)
MaxiSample = max(oneSample)
MiniSample = min(oneSample)
C = (MaxiSample-MiniSample)/(2*sqrt(n))
cinterval = ((MeanSample-C < 1) & (MeanSample + C > 1))
if cinterval
{
cont++
}
}
cont
lambda = 0.2
n= 40
times = 1000
vectMeans<- NULL
vectVar<-NULL
vectStDev<-NULL
samples <- replicate(times,rexp(n,lambda))
for (i in 1:times)
{
vectMeans <- c(vectMeans,mean(samples[,i]))
vectVar <- c(vectVar,var(samples[,i]))
vectStDev<-c(vectStDev, sd(samples[,i]))
}
View(samples)
theMean<-mean(vectMeans)
theDensity <- density(vectMeans)
plot(theDensity)
qqnorm(samples)
qqline(samples)
coverage = array(0,1000)
for (k in 1:1000)
{
oneSample=samples[,k]
MaxiSample = max(oneSample)
MiniSample = min(oneSample)
C = (MaxiSample-MiniSample)/(2*sqrt(n))
cinterval = ((vectMeans[,k]-C < 1) & (vectMeans[,k] + C > 1))
}
coverage = array(0,1000)
for (k in 1:1000)
{
oneSample=samples[,k]
MaxiSample = max(oneSample)
MiniSample = min(oneSample)
C = (MaxiSample-MiniSample)/(2*sqrt(n))
cinterval = ((vectMeans[k]-C < 1) & (vectMeans[k] + C > 1))
}
cinterval
coverage <- array(0,1000)
cs <- array(0,100)
for (k in 1:1000)
{
oneSample=samples[,k]
MaxiSample = max(oneSample)
MiniSample = min(oneSample)
C = (MaxiSample-MiniSample)/(2*sqrt(n))
cs[k]=C
cinterval = ((vectMeans[k]-C < 1) & (vectMeans[k] + C > 1))
}
cs
coverage <- array(0,1000)
cs <- array(0,100)
for (k in 1:1000)
{
oneSample<- samples[,k]
MaxiSample <- max(oneSample)
MiniSample <- min(oneSample)
C = (MaxiSample-MiniSample)/(2*sqrt(n))
cs[k]<-C
cinterval <- ((vectMeans[k]-C < 1) & (vectMeans[k] + C > 1))
coverage(k)<-mean(cinterval)
}
coverage <- array(0,1000)
cs <- array(0,100)
for (k in 1:1000)
{
oneSample<- samples[,k]
MaxiSample <- max(oneSample)
MiniSample <- min(oneSample)
C = (MaxiSample-MiniSample)/(2*sqrt(n))
cs[k]<-C
cinterval <- ((vectMeans[k]-C < 1) & (vectMeans[k] + C > 1))
coverage[k]<-mean(cinterval)
}
coverage
View(vectMeans)
View(cs)
qqnorm(samples)
qqline(samples)
hist(vectMeans)
qqnorm(samples)
qqline(samples)
hist(vectMeans)
lines(theDensity)
hist(vectMeans)
lines(theDensity)
lines(density(vectMeans), col="blue", lwd=2)
vectMeans
plot(theDensity)
hist(vectMeans)
lines(theDensity)
setwd("/Documentos/CURSOS/Coursera/Certification-DataScience/06-StatisticalInference/infStatistics-PartB")
library(ggplot2)
data(ToothGrowth)
head(ToothGrowth)
qplot(len,dose,data=ToothGrowth)
qplot(dose,len,data=ToothGrowth)
qplot(dose,len,data=ToothGrowth, facets= .~supp)
qplot(dose,len,data=ToothGrowth, color= supp)
